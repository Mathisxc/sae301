const chatbox = document.querySelector(".chatbox");
const chatInput = document.querySelector(".chat-input textarea");
const sendChatBtn = document.querySelector(".chat-input span");

const showChatboxBtn = document.getElementById("showChatboxBtn");



const responses = [
    "Je suis lÃ  pour t'aider.",
    
    "Bonjour, merci de me contacter. Actuellement, je ne suis pas disponible, mais je prendrai le temps de lire et de rÃ©pondre Ã  ta demande dÃ¨s que possible. Patiente un peu.",
    
    "Bonjour ! Je ne suis pas disponible en ce moment. ton message est important pour moi, et je m'engage Ã  le consulter dÃ¨s que je serai de retour. Merci pour ta comprÃ©hension.",
    
    "Bonjour, merci pour ton message. Actuellement, je ne suis pas en mesure de rÃ©pondre en dÃ©tail, mais soit sÃ»r que je prendrai connaissance de ta demande dÃ¨s que possible. Merci pour ta patience.",
    
    "Salut ! ton message a retenu toute mon attention, mais malheureusement, je ne suis pas disponible en ce moment. Je m'efforcerai de traiter ta demande dans les plus brefs dÃ©lais. ðŸ˜„",
    
    "Bonjour, merci pour ton message. Ã€ l'heure actuelle, je ne suis pas disponible pour rÃ©pondre immÃ©diatement, mais soit assurÃ© que je le ferai dÃ¨s que je le pourrai. Ta comprÃ©hension est trÃ¨s apprÃ©ciÃ©e.",
  ];
  

let userMessage = null; // Variable to store user's message
const API_KEY = ""; // Paste your API key here
const inputInitHeight = chatInput.scrollHeight;

const createChatLi = (message, className) => {
    // Create a chat <li> element with passed message and className
    const chatLi = document.createElement("li");
    chatLi.classList.add("chat", `${className}`);
    let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">            <img src="logo1.png" alt="Local Logo" id="logo" class="logochat" height=20px margin-top="5px"> </span><p></p>`;
    chatLi.innerHTML = chatContent;
    chatLi.querySelector("p").textContent = message;
    return chatLi; // return chat <li> element
}

const generateResponse = (chatElement) => {
    const API_URL = "https://api.openai.com/v1/chat/completions";
    const messageElement = chatElement.querySelector("p");

    // DÃ©finissez les propriÃ©tÃ©s et le message pour la requÃªte API
    const requestOptions = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: userMessage }],
        })
    }

    // Envoyez une requÃªte POST Ã  l'API, obtenez la rÃ©ponse et dÃ©finissez la rÃ©ponse comme texte du paragraphe
    fetch(API_URL, requestOptions).then(res => res.json()).then(data => {
        if (data.choices && data.choices.length > 0) {
            // Si une rÃ©ponse est renvoyÃ©e par l'API, utilisez-la
            messageElement.textContent = data.choices[0].message.content.trim();
        } else {
            // SÃ©lectionnez une rÃ©ponse alÃ©atoire parmi les rÃ©ponses possibles
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            messageElement.textContent = randomResponse;
        }
    }).catch(() => {
        messageElement.classList.add("error");
        messageElement.textContent = "Bonjour! Je ne suis pas disponible pour le moment, je te recontacte dÃ¨s que possible.";
    }).finally(() => chatbox.scrollTo(0, chatbox.scrollHeight));
}

const handleChat = () => {
    userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
    if(!userMessage) return;

    // Clear the input textarea and set its height to default
    chatInput.value = "";
    chatInput.style.height = `${inputInitHeight}px`;

    // Append the user's message to the chatbox
    chatbox.appendChild(createChatLi(userMessage, "outgoing"));
    chatbox.scrollTo(0, chatbox.scrollHeight);
    
    setTimeout(() => {
        // Display "Thinking..." message while waiting for the response
        const incomingChatLi = createChatLi("Est entrain d'Ã©crire...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);
        generateResponse(incomingChatLi);
    }, 600);
}

chatInput.addEventListener("input", () => {
    // Adjust the height of the input textarea based on its content
    chatInput.style.height = `${inputInitHeight}px`;
    chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", (e) => {
    // If Enter key is pressed without Shift key and the window 
    // width is greater than 800px, handle the chat
    if(e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleChat();
    }
});

sendChatBtn.addEventListener("click", handleChat);
closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));

showChatboxBtn.addEventListener("click", () => {
  document.body.classList.add("show-chatbot");
});
